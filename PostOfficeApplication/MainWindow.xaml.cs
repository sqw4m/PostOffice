using PostOffice_Model;
using PostOfficeApplication.Controllers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Threading;
using System.Windows.Shapes;
using PostOfficeApplication.Views;

namespace PostOfficeApplication
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        PostOfficeController _postOfficeController;
        List<string> _publicationTypes;
        List<string> _subscribers;
        List<string> _publications;
        List<string> _postmen;
        List<string> _streets;
        List<string> _people;
        string _totalPrice;

        public MainWindow()
        {
            Views.SplashScreen s = new Views.SplashScreen(this);
            s.Show();
            this.Hide();

            InitializeComponent();
            _postOfficeController = new PostOfficeController(this);

            _postOfficeController.ListPublicationTypes();
            _postOfficeController.ListSubscribers();
            _postOfficeController.ListPublications();
            _postOfficeController.ListPostmen();
            _postOfficeController.ListStreets();

            _postOfficeController.ShowSubscriptions();
            _postOfficeController.ShowAllPostmen(); 
            _postOfficeController.ShowQuantOfTypesPublications(); 
            _postOfficeController.ShowPlotMaxSubscription();

        } // MainWindow

        #region корректировка заголовков таблицы
        private void DataGrid_AutoGeneratedColunns(object sender, EventArgs e)
        {
            if (DgPostOffice.Columns.Count > 0)
            {
                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Subscriber"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Subscriber").First().Header = "Подписчик";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "PublicationType"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "PublicationType").First().Header = "Тип издания";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "PublicationName"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "PublicationName").First().Header = "Название";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Date"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Date").First().Header = "Дата подписки";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Term"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Term").First().Header = "Срок подписки";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Index"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Index").First().Header = "Индекс";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Price"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Price").First().Header = "Цена";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Surname"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Surname").First().Header = "Фамилия";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Name"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Name").First().Header = "Имя";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Patronymic"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Patronymic").First().Header = "Отчество";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Address"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Address").First().Header = "Адрес";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Plot"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Plot").First().Header = "Участок, №";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Postman"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Postman").First().Header = "Почтальон";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "Quantity"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "Quantity").First().Header = "Количество";

                if (DgPostOffice.Columns.Any(x => x.Header.ToString() == "PlotNumber"))
                    DgPostOffice.Columns.Where(a => a.Header.ToString() == "PlotNumber").First().Header = "Участок, №";
            } // if
        } // DataGrid_AutoGeneratedColunns
        #endregion

        // выход
        private void Exit_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            Application.Current.Shutdown();
        } // Exit_Exec

        // инфо
        private void About_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            About about = new About();
            about.ShowDialog();
        } // About_Exec

        // вывод всех подписок
        private void ShowSubscriptions_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ShowSubscriptions();
        } // ShowSubscriptions_Exec

        // вывод всех переодических печатных изданий
        private void ShowPublications_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ShowPublications();
        } // ShowPublications_Exec

        // вывод всех подписчиков
        private void ShowSubscribers_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ShowSubscribers();
        } // ShowSubscribers_Exec

        // вывод всех почтальонов
        private void ShowPostmen_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ShowPostmen();
        } // ShowPostmen_Exec

        // вывести все районы и обслуживающих их почтальонов
        private void ShowPlots_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ShowPlots();
        } // ShowPlots_Exec

        // оформить подписку
        private void Subscribe_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ListSubscribers();
            _postOfficeController.ListPublications();

            AddNewSubscription add = new AddNewSubscription(_streets, _publications);

            if (add.ShowDialog() != true) return;

            string[] SubscribtionData = add.GetSubscription().Split(';');
            string[] publication = SubscribtionData[6].Split('/');

            _postOfficeController.AddNewSubscription(SubscribtionData[0], SubscribtionData[1], SubscribtionData[2],
                                                    SubscribtionData[3], SubscribtionData[4], int.Parse(SubscribtionData[5]),
                                                    publication[0], SubscribtionData[7],
                                                    int.Parse(SubscribtionData[8]), publication[1]);
        } // Subscribe_Exec

        // добавить новое печатное издание
        private void AddNewPublication_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            AddNewPublication add = new AddNewPublication(_publicationTypes);
            
            if (add.ShowDialog() != true) return;

            string[] publicationData = add.GetPublication().Split(';');

            _postOfficeController.AddNewPublication(publicationData[0], publicationData[1],
                                        double.Parse(publicationData[2]), publicationData[3]);
        } // AddNewPublication_Exec

        // прием почтальоона на работу
        private void AddNewPostman_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            AddNewPostman add = new AddNewPostman();
            if (add.ShowDialog() != true) return;

            string[] postmanData = add.GetPostman().Split(';');
            string[] plots = postmanData[3].Split('/');

            _postOfficeController.AddNewPostman(postmanData[0], postmanData[1], postmanData[2],
                                                plots);
        } // AddNewPostman_Exec

        // увольнение почтальона
        private void LayOffPostman_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.ListPostmen();

            LayOffPostman layOff = new LayOffPostman(_postmen);
            if (layOff.ShowDialog() != true) return;

            string[] postman = layOff.GetPostman().Split(' ');

            _postOfficeController.LayOffPostman(postman[0], postman[1], postman[2]);
        } // LayOffPostman_Exec

        // По заданному адресу определить фамилию почтальона, обслуживающего подписчика
        private void IdentifyPostman_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            SearchPostmanBySubscribAddress s = new SearchPostmanBySubscribAddress(_streets);
            if (s.ShowDialog() != true) return;

            string[] address = s.GetAddress().Split(';');
            _postOfficeController.ShowPostmanBySubscriberAddress(address[0], address[1], int.Parse(address[2]));
        } // IdentifyPostman_Exec

        // Какие газеты выписывает гражданин с указанной фамилией, именем, отчеством
        private void IdentifyPublications_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            SearchPublicationsBySubscriber s = new SearchPublicationsBySubscriber();

            if (s.ShowDialog() != true) return;

            string[] fio = s.GetFIO().Split(';');

            _postOfficeController.ShowPublicationsByFIOSubscriber(fio[0], fio[1], fio[2]);
        } // IdentifyPublications_Exec

        // Каков средний срок подписки по каждому изданию
        private void AverageSubscriptionTerm_Exec(object sender, ExecutedRoutedEventArgs e)
        {
            _postOfficeController.AverageSubscriptionTerm();
        } // AverageSubscriptionTerm_Exec

        // заполнить таблицу
        public void FillDataGrid(IList list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => DgPostOffice.ItemsSource = list));
        } // FillDataGrid

        // заполнить строку состояния общее кол-во почтальонов в отеделнии
        public void FillLblAllPostmen(string postmenQuant)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => LblAllPostmen.Text = postmenQuant));
        } // FillDataGrid

        // На каком участке количество экземпляров подписных изданий максимально
        public void FillLblPlotMaxSubscription(string plotNum)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => LblPlotMaxSubscription.Text = plotNum));
        } // FillDataGrid

        // На каком участке количество экземпляров подписных изданий максимально
        public void FillLblQuantOfTypesPublications(string quant)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => LblQuantOfTypesPublications.Text = quant));
        } // FillDataGrid

        // заполнить список типов публикаций
        public void FillPublicationTypeList(List<string> list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _publicationTypes = list));
        } // FillPublicationTypeList

        // заполнить список подписчиков
        public void FillSubscribersList(List<string> list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _subscribers = list));
        } // FillSubscribersList

        // заполнить список печатных изданий
        public void FillPublicationsList(List<string> list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _publications = list));
        } // FillPublicationsList

        // заполнить список почтальонов
        public void FillPostmenList(List<string> list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _postmen = list));
        } // FillPostmenList

        // заполнить список улиц
        public void FillStreetsList(List<string> list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _streets = list));
        } // FillStreetsList

        // заполнить список людей
        public void FillPeopleList(List<string> list)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _people = list));
        } // FillPeopleList

        // заполнить стоимость подписки за указаный срок
        public void FillTotalPrice(string totalPrice)
        {
            Dispatcher.BeginInvoke(
               DispatcherPriority.Normal,
               (ThreadStart)(() => _totalPrice = totalPrice));
        } // FillPeopleList

    }
}
